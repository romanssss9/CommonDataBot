import os
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, LabeledPrice
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, ConversationHandler, MessageHandler, filters,
    PreCheckoutQueryHandler
)

from database import (
    init_db, add_or_update_user, update_user_email,
    update_user_phone, get_user, update_user_subscription
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")

EMAIL, PHONE = range(2)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üìã –ú–µ–Ω—é"), KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_or_update_user(user.id, user.first_name, user.username)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª Common Data.\n"
        "–ù–∞–∂–º–∏ üìã –ú–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=get_main_keyboard()
    )


# –ú–µ–Ω—é
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å email", callback_data='add_email')],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data='add_phone')],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data='show_profile')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'add_email':
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
        return EMAIL
    elif query.data == 'add_phone':
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return PHONE
    elif query.data == 'show_profile':
        user_data = get_user(query.from_user.id)
        if user_data:
            msg = (
                f"üë§ –ò–º—è: {user_data['first_name']}\n"
                f"üÜî Telegram ID: {user_data['telegram_id']}\n"
                f"üìß Email: {user_data['email'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üíº –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if user_data['is_subscription'] else '–ù–µ—Ç'}"
            )
        else:
            msg = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."
        await query.message.reply_text(msg)
        return ConversationHandler.END


# –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def buy_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prices = [LabeledPrice("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", 29900)]  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö

    await context.bot.send_invoice(
        chat_id=update.effective_user.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Common Data",
        description="–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤—É.",
        payload="common-data-subscription",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="subscribe",
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    if query.invoice_payload != 'common-data-subscription':
        await query.answer(ok=False, error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
    else:
        await query.answer(ok=True)


# –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    update_user_subscription(update.effective_user.id, True)


# Email
async def handle_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email = update.message.text
    update_user_email(update.effective_user.id, email)
    await update.message.reply_text("Email —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
    return ConversationHandler.END


# –¢–µ–ª–µ—Ñ–æ–Ω
async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    update_user_phone(update.effective_user.id, phone)
    await update.message.reply_text("–¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
    return ConversationHandler.END


# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))

    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìã –ú–µ–Ω—é$"), menu))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É$"), buy_subscription))

    # –û–ø–ª–∞—Ç–∞
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))

    # Inline –∫–Ω–æ–ø–∫–∏ –∏ email/—Ç–µ–ª–µ—Ñ–æ–Ω
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_email)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
