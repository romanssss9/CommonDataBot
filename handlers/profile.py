from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import buttons,  profile_kb
import re

from database import (
    update_user_email,
    update_user_phone,
    get_user
)

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ProfileStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_phone = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–æ—Ñ–∏–ª—å" (–∫–Ω–æ–ø–∫–∞ –ü—Ä–æ—Ñ–∏–ª—å –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
@router.message(F.text == buttons['profile'])
async def show_profile(message: Message):

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    user_data = get_user(message.from_user.id)
    
    if user_data:
        msg = (
            f"üë§ –ò–º—è: {user_data['first_name']}\n"
            f"üÜî Telegram ID: {user_data['telegram_id']}\n"
            f"üìß Email: {user_data['email'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üíº –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if user_data['is_subscription'] else '–ù–µ—Ç'}"
        )
    else:
        msg = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await message.answer(msg, reply_markup=profile_kb)

    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–î–æ–±–∞–≤–∏—Ç—å email"
@router.callback_query(F.data == "add_email")
async def add_email(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –≤ —Ñ–æ—Ä–º–∞—Ç–µ example@gmail.com:")
    await state.set_state(ProfileStates.waiting_for_email)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"
@router.callback_query(F.data == "add_phone")
async def add_phone(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(ProfileStates.waiting_for_phone)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email
@router.message(ProfileStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    email = message.text.strip()

    EMAIL_REGEX = re.compile(r"^[\w\.-]+@[\w\.-]+\.\w+$")

    if not EMAIL_REGEX.match(email):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü—Ä–∏–º–µ—Ä: `example@mail.com`", parse_mode="Markdown")
        return

    update_user_email(message.from_user.id, email)
    await message.answer("‚úÖ Email —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(ProfileStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text.strip().replace(" ", "")

    PHONE_REGEX = re.compile(r"^\+?\d{10,15}$")
    
    if not PHONE_REGEX.match(phone):
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä, –º–æ–∂–Ω–æ —Å `+` –≤ –Ω–∞—á–∞–ª–µ).")
        return

    update_user_phone(message.from_user.id, phone)
    await message.answer("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await state.clear()
